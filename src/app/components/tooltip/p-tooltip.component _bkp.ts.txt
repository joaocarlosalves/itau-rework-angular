import { ChangeDetectorRef, Component, ElementRef, HostListener, Input, ViewChild } from '@angular/core';

@Component({
  selector: 'p-tooltip',
  template: `
    <a
      class='p-tooltip {{ side }} {{ css }}'
      [ngStyle]='setTooltipStyles()'
      [ngClass]="classList"
      #tip>
      <ng-content></ng-content>

      <span
        #box *ngIf='onHover'
        [class.p-bottom-tooltip-in]='!offHover'
        [class.p-bottom-tooltip-out]='offHover'>{{ text }}</span>
    </a>
  `,
  styles: [`

/*     .p-tooltip[tooltip]:before {
      background-color: var(--tipBG);
      color: var(--tipCL);
      border-radius: var(--tipBorderRadius);
      border-color: var(--tipBorderColor);
      border-style: var(--tipBorderStyle);
      border-width: var(--tipBorderWidth);
      width: var(--tipWidth);
      height: var(--tipHeight);
      padding: var(--tipPadding);
      font-size: var(--tipFontSize);
    } */
  `]
})
export class PootaTooltipComponent {
  too: boolean = false;
  onHover: boolean = false;
  offHover: boolean = false;
  classList: any = [];
  @Input() target: string = '';
  @Input() href: string = '';
  @Input() background: string = 'primary';
  @Input() text: string = '';
  @Input() side: string = 'top-tooltip';
  @Input() color: string = '';
  @Input() css: string = '';
  @Input() border: string = '';
  @Input() padding: any = '4px 8px';
  @Input() width: any = 'max-content';
  @Input() height: any = 'max-content';
  @Input('border-width') borderWidth: any = '';
  @Input('border-color') borderColor: any = '';
  @Input('border-style') borderStyle: any = '';
  @Input('border-radius') borderRadius: any = '';
  @Input('text-color') textColor: string = 'white';
  @Input('font-size') fontSize: string = '16px';
  @Input('link') set setLink(l: string) { this.href = l };
  @Input('_blank') set set_Blank(b: string) { this.target = '_blank' };
  @Input('blank') set setBlank(b: string) { this.target = '_blank' };
  @Input('_self') set set_Self(s: string) { this.target = '_self' };
  @Input('self') set setSelf(s: string) { this.target = '_self' };
  @Input('tooltip') set setTooltip(t: string) { this.text = t };
  @Input('tooltip-text') set setTooltipText(tt: string) { this.text = tt };
  @Input('link-color') set setLinkColor(lc: string) { this.classList.push('color-'+lc) };
  @Input('rounded') set setRounded(r: boolean | '') { this.classList.push('rounded') };
  @Input('no-underline') set setNoUndl(u: boolean | '') { this.classList.push('no-text-decoration') };
  @Input('no-text-decoration') set setNoDec(d: boolean | '') { this.classList.push('no-text-decoration') };
  @Input('full-rounded') set setFullRounded(fr: boolean | '') { this.classList.push('full-rounded') };
  @Input('top') set setTop(t: boolean | '') { this.classList.push('top-tooltip') };
  @Input('bottom') set setBottom(b: boolean | '') { this.classList.push('bottom-tooltip') };
  @Input('left') set setLeft(l: boolean | '') { this.classList.push('left-tooltip') };
  @Input('right') set setRight(r: boolean | '') { this.classList.push('right-tooltip') };
  @Input('top-right') set setTopRight(tr: boolean | '') { this.classList.push('top-right-tooltip') };
  @Input('top-left') set setTopLeft(tl: boolean | '') { this.classList.push('top-left-tooltip') };
  @Input('bottom-left') set setBottomLeft(bl: boolean | '') { this.classList.push('bottom-left-tooltip') };
  @Input('bottom-right') set setBottomRight(br: boolean | '') { this.classList.push('bottom-right-tooltip') };
  @ViewChild('tip') tip: ElementRef;
  @ViewChild('box') box: ElementRef;

  @HostListener('mouseenter') onMouseEnter() { this.onHover = !this.onHover };
  @HostListener('mouseleave') onMouseLeave() {
    this.offHover = true;
    setTimeout(() => {
      this.onHover = !this.onHover;
      this.offHover = false;
    }, 300)
  };

  constructor(private cdr: ChangeDetectorRef) { }

  setTooltipStyles() {
    this.borderWidth = this.borderWidth == '' ? this.border.split(' ')[0] : this.borderWidth;
    this.borderStyle = this.borderStyle == '' ? this.border.split(' ')[1] : this.borderStyle;
    this.borderColor = this.borderColor == '' ? `var(--${  this.border.split(' ')[2] })` :
      this.borderColor.split(' ').map((c: string) => { return `var(--${ c })` }).toString().replaceAll(',', ' ');

     return {
      '--tipBG': 'var(--'+this.background+')',
      '--tipCL': 'var(--'+this.color+')',
      '--tipBorderRadius': this.borderRadius,
      '--tipBorderColor': this.borderColor,
      '--tipBorderWidth': this.borderWidth,
      '--tipBorderStyle': this.borderStyle,
      '--tipWidth': this.width!,
      '--tipHeight': this.height!,
      '--tipPadding': this.padding!,
      '--tipFontSize': this.fontSize!
    }
  }

  ngAfterViewInit() {
    this.cdr.detectChanges();
    if(this.href != "") this.tip.nativeElement.setAttribute('href', this.href);
    if(this.target != "") this.tip.nativeElement.setAttribute('target', this.target);
    //this.tip.nativeElement.setAttribute('tooltip', this.text);
  }
}
